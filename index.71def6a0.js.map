{"mappings":"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","sources":["<anon>","src/main.ts","src/game.class.ts","src/utils.class.ts"],"sourcesContent":["(function () {\nclass $6260f855154fb2c7$export$2e2bcd8739ae039 {\n    static getRandomTileValue() {\n        // value:probability\n        const possibleValues = {\n            2: 0.9,\n            4: 0.1\n        };\n        const probabilitiesSum = Object.values(possibleValues).reduce((a, b)=>a + b, 0);\n        let pick = Math.random() * probabilitiesSum;\n        // eslint-disable-next-line no-restricted-syntax, guard-for-in\n        for(const i in possibleValues){\n            pick -= possibleValues[i];\n            if (pick <= 0) return Number(i);\n        }\n        return possibleValues[Object.values(possibleValues)[0]];\n    }\n}\n\n\nconst $7ee79a805c8a64d2$var$moveAnimationOptions = {\n    duration: 150,\n    fill: \"forwards\"\n};\nconst $7ee79a805c8a64d2$var$mergeAnimationOptions = {\n    duration: 200,\n    easing: \"ease\"\n};\nclass $7ee79a805c8a64d2$export$2e2bcd8739ae039 {\n    #TILE_OFFSET_PX;\n    #isUiBlocked;\n    #score;\n    #fieldEl;\n    #fieldElSize;\n    #tileSize;\n    #field;\n    #keyBindings;\n    constructor(){\n        this.#TILE_OFFSET_PX = 10;\n        this.#isUiBlocked = false;\n        this.#score = 0;\n        this.#field = [\n            [\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null\n            ]\n        ];\n        this.#fieldEl = document.getElementById(\"field\");\n        this.#fieldElSize = this.#fieldEl.getBoundingClientRect().width;\n        this.#tileSize = (this.#fieldElSize - this.#TILE_OFFSET_PX * (this.#field.length + 1)) / this.#field.length;\n        this.#keyBindings = {\n            ArrowDown: this.#moveDown.bind(this),\n            ArrowUp: this.#moveUp.bind(this),\n            ArrowLeft: this.#moveLeft.bind(this),\n            ArrowRight: this.#moveRight.bind(this)\n        };\n        this.#field = [\n            [\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null\n            ]\n        ];\n    }\n    init() {\n        this.#generateRandomTile();\n        this.#generateRandomTile();\n        this.#buildBackgroundGrid();\n        this.#buildTiles();\n        document.addEventListener(\"keydown\", (event)=>{\n            if (this.#isUiBlocked) return;\n            const func = this.#keyBindings[event.code];\n            event.preventDefault();\n            if (func) func()?.then(()=>{\n                [].forEach.call(document.querySelectorAll(\".tile\"), (e)=>{\n                    e.parentNode.removeChild(e);\n                });\n                this.#buildTiles();\n            });\n        });\n        document.querySelector(\".reset-button\")?.addEventListener(\"click\", this.#reset.bind(this));\n    }\n    #reset() {\n        this.#field = [\n            [\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null\n            ]\n        ];\n        this.#score = 0;\n        this.#updateScore(0);\n        this.init();\n    }\n    #updateScore(valueToAdd) {\n        const scoreEl = document.querySelector(\"#score-number\");\n        if (!scoreEl) return;\n        this.#score += valueToAdd;\n        scoreEl.innerText = this.#score.toString();\n    }\n    #generateRandomTile() {\n        const emptyCells = [];\n        this.#field.forEach((row, rowIndex)=>{\n            row.forEach((col, colIndex)=>{\n                if (!col) emptyCells.push({\n                    x: rowIndex,\n                    y: colIndex\n                });\n            });\n        });\n        const min = 0;\n        const max = emptyCells.length - 1;\n        const randomEmptyCell = emptyCells[Math.floor(Math.random() * (max - min) + min)];\n        if (randomEmptyCell) this.#field[randomEmptyCell.x][randomEmptyCell.y] = (0, $6260f855154fb2c7$export$2e2bcd8739ae039).getRandomTileValue();\n    }\n    #buildTiles() {\n        this.#field.forEach((row, rowIndex)=>{\n            row.forEach((el, colIndex)=>{\n                if (!el) return;\n                const div = document.createElement(\"div\");\n                div.classList.add(\"tile\");\n                div.style.width = `${this.#tileSize}px`;\n                div.style.height = `${this.#tileSize}px`;\n                const top = this.#tileSize * rowIndex + this.#TILE_OFFSET_PX * (rowIndex + 1);\n                const left = this.#tileSize * colIndex + this.#TILE_OFFSET_PX * (colIndex + 1);\n                div.style.left = `${left}px`;\n                div.style.top = `${top}px`;\n                div.dataset.row = rowIndex.toString();\n                div.dataset.col = colIndex.toString();\n                div.innerText = el.toString();\n                this.#fieldEl.appendChild(div);\n            });\n        });\n    }\n    #buildBackgroundGrid() {\n        this.#field.forEach((row, rowIndex)=>{\n            row.forEach((el, colIndex)=>{\n                const div = document.createElement(\"div\");\n                div.classList.add(\"bgTile\");\n                div.style.width = `${this.#tileSize}px`;\n                div.style.height = `${this.#tileSize}px`;\n                const top = this.#tileSize * rowIndex + this.#TILE_OFFSET_PX * (rowIndex + 1);\n                const left = this.#tileSize * colIndex + this.#TILE_OFFSET_PX * (colIndex + 1);\n                div.style.left = `${left}px`;\n                div.style.top = `${top}px`;\n                this.#fieldEl.appendChild(div);\n            });\n        });\n    }\n    #animateMove(div, property, value, callback) {\n        this.#isUiBlocked = true;\n        div.animate({\n            [property]: `${value}px`\n        }, $7ee79a805c8a64d2$var$moveAnimationOptions).finished.then(()=>{\n            this.#isUiBlocked = false;\n            callback();\n        });\n    }\n    #animateMerge(div, property, value, mergedValue, callback) {\n        this.#isUiBlocked = true;\n        div.animate({\n            [property]: `${value}px`\n        }, $7ee79a805c8a64d2$var$moveAnimationOptions).finished.then(()=>{\n            // eslint-disable-next-line no-param-reassign\n            div.innerText = mergedValue.toString();\n            div.animate({\n                transform: \"scale(1.1)\"\n            }, $7ee79a805c8a64d2$var$mergeAnimationOptions).finished.then(()=>{\n                this.#isUiBlocked = false;\n                callback(null);\n            });\n        });\n    }\n    #moveLeft() {\n        const promises = [];\n        let isDidAnyActions = false;\n        for(let rowIndex = 0; rowIndex < this.#field.length; rowIndex++){\n            for(let colIndex = 0; colIndex <= this.#field.length - 1; colIndex++)for(let i = colIndex + 1; i <= this.#field.length - 1; i++){\n                if (!this.#field[rowIndex][i]) continue;\n                const div = document.querySelector(`[data-row=\"${rowIndex}\"][data-col=\"${i}\"]`);\n                if (!div) return Promise.reject();\n                if (!this.#field[rowIndex][colIndex]) {\n                    this.#isUiBlocked = true;\n                    const p = new Promise((resolve)=>{\n                        const left = this.#tileSize * colIndex + this.#TILE_OFFSET_PX * (colIndex + 1);\n                        div.dataset.col = colIndex.toString();\n                        this.#animateMove(div, \"left\", left, resolve);\n                        this.#field[rowIndex][colIndex] = this.#field[rowIndex][i];\n                        this.#field[rowIndex][i] = null;\n                    });\n                    isDidAnyActions = true;\n                    promises.push(p);\n                    continue;\n                }\n                if (this.#field[rowIndex][colIndex] === this.#field[rowIndex][i]) {\n                    const p = new Promise((resolve)=>{\n                        const left = this.#tileSize * colIndex + this.#TILE_OFFSET_PX * (colIndex + 1);\n                        div.dataset.col = colIndex.toString();\n                        const mergedValue = this.#field[rowIndex][i] * 2;\n                        this.#animateMerge(div, \"left\", left, mergedValue, resolve);\n                        this.#field[rowIndex][colIndex] = mergedValue;\n                        this.#field[rowIndex][i] = null;\n                        this.#updateScore(mergedValue);\n                    });\n                    isDidAnyActions = true;\n                    promises.push(p);\n                    break;\n                } else break;\n            }\n        }\n        if (isDidAnyActions) this.#generateRandomTile();\n        return Promise.all(promises);\n    }\n    #moveRight() {\n        const promises = [];\n        let isDidAnyActions = false;\n        for(let rowIndex = 0; rowIndex < this.#field.length; rowIndex++){\n            for(let colIndex = this.#field.length - 1; colIndex >= 0; colIndex--)for(let i = colIndex - 1; i >= 0; i--){\n                if (!this.#field[rowIndex][i]) continue;\n                const div = document.querySelector(`[data-row=\"${rowIndex}\"][data-col=\"${i}\"]`);\n                if (!div) return Promise.reject();\n                if (!this.#field[rowIndex][colIndex]) {\n                    this.#isUiBlocked = true;\n                    const p = new Promise((resolve)=>{\n                        const left = this.#tileSize * colIndex + this.#TILE_OFFSET_PX * (colIndex + 1);\n                        div.dataset.col = colIndex.toString();\n                        this.#animateMove(div, \"left\", left, resolve);\n                        this.#field[rowIndex][colIndex] = this.#field[rowIndex][i];\n                        this.#field[rowIndex][i] = null;\n                    });\n                    isDidAnyActions = true;\n                    promises.push(p);\n                    continue;\n                }\n                if (this.#field[rowIndex][colIndex] === this.#field[rowIndex][i]) {\n                    const p = new Promise((resolve)=>{\n                        const left = this.#tileSize * colIndex + this.#TILE_OFFSET_PX * (colIndex + 1);\n                        div.dataset.col = colIndex.toString();\n                        const mergedValue = this.#field[rowIndex][i] * 2;\n                        this.#animateMerge(div, \"left\", left, mergedValue, resolve);\n                        this.#field[rowIndex][colIndex] = mergedValue;\n                        this.#field[rowIndex][i] = null;\n                        this.#updateScore(mergedValue);\n                    });\n                    isDidAnyActions = true;\n                    promises.push(p);\n                    break;\n                } else break;\n            }\n        }\n        if (isDidAnyActions) this.#generateRandomTile();\n        return Promise.all(promises);\n    }\n    #moveDown() {\n        const promises = [];\n        let isDidAnyActions = false;\n        for(let colIndex = 0; colIndex < this.#field.length; colIndex++){\n            for(let rowIndex = this.#field.length - 1; rowIndex >= 0; rowIndex--)for(let i = rowIndex - 1; i >= 0; i--){\n                if (!this.#field[i][colIndex]) continue;\n                const div = document.querySelector(`[data-row=\"${i}\"][data-col=\"${colIndex}\"]`);\n                if (!div) return Promise.reject();\n                if (!this.#field[rowIndex][colIndex]) {\n                    this.#isUiBlocked = true;\n                    const p = new Promise((resolve)=>{\n                        const top = this.#tileSize * rowIndex + this.#TILE_OFFSET_PX * (rowIndex + 1);\n                        div.dataset.row = rowIndex.toString();\n                        this.#animateMove(div, \"top\", top, resolve);\n                        this.#field[rowIndex][colIndex] = this.#field[i][colIndex];\n                        this.#field[i][colIndex] = null;\n                    });\n                    isDidAnyActions = true;\n                    promises.push(p);\n                    continue;\n                }\n                if (this.#field[rowIndex][colIndex] === this.#field[i][colIndex]) {\n                    const p = new Promise((resolve)=>{\n                        const top = this.#tileSize * rowIndex + this.#TILE_OFFSET_PX * (rowIndex + 1);\n                        div.dataset.row = rowIndex.toString();\n                        const mergedValue = this.#field[i][colIndex] * 2;\n                        this.#animateMerge(div, \"top\", top, mergedValue, resolve);\n                        this.#field[rowIndex][colIndex] = mergedValue;\n                        this.#field[i][colIndex] = null;\n                        this.#updateScore(mergedValue);\n                    });\n                    isDidAnyActions = true;\n                    promises.push(p);\n                    break;\n                } else break;\n            }\n        }\n        if (isDidAnyActions) this.#generateRandomTile();\n        return Promise.all(promises);\n    }\n    #moveUp() {\n        const promises = [];\n        let isDidAnyActions = false;\n        for(let colIndex = 0; colIndex < this.#field.length; colIndex++){\n            for(let rowIndex = 0; rowIndex <= this.#field.length - 1; rowIndex++)for(let i = rowIndex + 1; i <= this.#field.length - 1; i++){\n                if (!this.#field[i][colIndex]) continue;\n                const div = document.querySelector(`[data-row=\"${i}\"][data-col=\"${colIndex}\"]`);\n                if (!div) return Promise.reject();\n                if (!this.#field[rowIndex][colIndex]) {\n                    this.#isUiBlocked = true;\n                    const p = new Promise((resolve)=>{\n                        const top = this.#tileSize * rowIndex + this.#TILE_OFFSET_PX * (rowIndex + 1);\n                        div.dataset.row = rowIndex.toString();\n                        this.#animateMove(div, \"top\", top, resolve);\n                        this.#field[rowIndex][colIndex] = this.#field[i][colIndex];\n                        this.#field[i][colIndex] = null;\n                    });\n                    isDidAnyActions = true;\n                    promises.push(p);\n                    continue;\n                }\n                if (this.#field[rowIndex][colIndex] === this.#field[i][colIndex]) {\n                    const p = new Promise((resolve)=>{\n                        const top = this.#tileSize * rowIndex + this.#TILE_OFFSET_PX * (rowIndex + 1);\n                        div.dataset.row = rowIndex.toString();\n                        const mergedValue = this.#field[i][colIndex] * 2;\n                        this.#animateMerge(div, \"top\", top, mergedValue, resolve);\n                        this.#field[rowIndex][colIndex] = mergedValue;\n                        this.#field[i][colIndex] = null;\n                        this.#updateScore(mergedValue);\n                    });\n                    isDidAnyActions = true;\n                    promises.push(p);\n                    break;\n                } else break;\n            }\n        }\n        if (isDidAnyActions) this.#generateRandomTile();\n        return Promise.all(promises);\n    }\n}\n\n\nconst $02b2fc1f0fd6e808$var$game = new (0, $7ee79a805c8a64d2$export$2e2bcd8739ae039)();\n$02b2fc1f0fd6e808$var$game.init();\n\n})();\n//# sourceMappingURL=index.71def6a0.js.map\n","import Game from './game.class';\n\nconst game = new Game();\ngame.init();\n","import Utils from './utils.class';\n\ntype Field = (number | null)[][];\ntype AnimationProperty = 'top' | 'left';\n\nconst moveAnimationOptions: KeyframeAnimationOptions = {\n  duration: 150,\n  fill: 'forwards',\n};\n\nconst mergeAnimationOptions: KeyframeAnimationOptions = {\n  duration: 200,\n  easing: 'ease',\n};\n\nexport default class Game {\n  #TILE_OFFSET_PX = 10;\n\n  #isUiBlocked = false;\n\n  #score = 0;\n\n  #fieldEl: HTMLElement;\n\n  #fieldElSize: number;\n\n  #tileSize: number;\n\n  #field: Field = [\n    [null, null, null, null],\n    [null, null, null, null],\n    [null, null, null, null],\n    [null, null, null, null],\n  ];\n\n  #keyBindings: { [key: string]: Function };\n\n  constructor() {\n    this.#fieldEl = document.getElementById('field')!;\n    this.#fieldElSize = this.#fieldEl.getBoundingClientRect().width;\n    this.#tileSize = (this.#fieldElSize - (this.#TILE_OFFSET_PX * (this.#field.length + 1))) / this.#field.length;\n\n    this.#keyBindings = {\n      ArrowDown: this.#moveDown.bind(this),\n      ArrowUp: this.#moveUp.bind(this),\n      ArrowLeft: this.#moveLeft.bind(this),\n      ArrowRight: this.#moveRight.bind(this),\n    };\n\n    this.#field = [\n      [null, null, null, null],\n      [null, null, null, null],\n      [null, null, null, null],\n      [null, null, null, null],\n    ];\n  }\n\n  init() {\n    this.#generateRandomTile();\n    this.#generateRandomTile();\n\n    this.#buildBackgroundGrid();\n    this.#buildTiles();\n\n    document.addEventListener('keydown', (event) => {\n      if (this.#isUiBlocked) return;\n\n      const func = this.#keyBindings[event.code];\n\n      event.preventDefault();\n\n      if (func) {\n        func()?.then(() => {\n          [].forEach.call(document.querySelectorAll('.tile'), (e: HTMLDivElement) => {\n            e.parentNode!.removeChild(e);\n          });\n\n          this.#buildTiles();\n        });\n      }\n    });\n\n    document.querySelector('.reset-button')?.addEventListener('click', this.#reset.bind(this));\n  }\n\n  #reset() {\n    this.#field = [\n      [null, null, null, null],\n      [null, null, null, null],\n      [null, null, null, null],\n      [null, null, null, null],\n    ];\n\n    this.#score = 0;\n    this.#updateScore(0);\n    this.init();\n  }\n\n  #updateScore(valueToAdd: number) {\n    const scoreEl = document.querySelector<HTMLSpanElement>('#score-number');\n    if (!scoreEl) return;\n\n    this.#score += valueToAdd;\n    scoreEl.innerText = this.#score.toString();\n  }\n\n  #generateRandomTile() {\n    const emptyCells: { x: number, y: number }[] = [];\n\n    this.#field.forEach((row, rowIndex) => {\n      row.forEach((col, colIndex) => {\n        if (!col) {\n          emptyCells.push({ x: rowIndex, y: colIndex });\n        }\n      });\n    });\n\n    const min = 0;\n    const max = emptyCells.length - 1;\n    const randomEmptyCell = emptyCells[Math.floor(Math.random() * (max - min) + min)];\n\n    if (randomEmptyCell) {\n      this.#field[randomEmptyCell.x][randomEmptyCell.y] = Utils.getRandomTileValue();\n    }\n  }\n\n  #buildTiles() {\n    this.#field.forEach((row, rowIndex) => {\n      row.forEach((el, colIndex) => {\n        if (!el) return;\n\n        const div = document.createElement('div');\n        div.classList.add('tile');\n        div.style.width = `${this.#tileSize}px`;\n        div.style.height = `${this.#tileSize}px`;\n\n        const top = (this.#tileSize * rowIndex) + this.#TILE_OFFSET_PX * (rowIndex + 1);\n        const left = (this.#tileSize * colIndex) + this.#TILE_OFFSET_PX * (colIndex + 1);\n\n        div.style.left = `${left}px`;\n        div.style.top = `${top}px`;\n\n        div.dataset.row = rowIndex.toString();\n        div.dataset.col = colIndex.toString();\n\n        div.innerText = el.toString();\n        this.#fieldEl.appendChild(div);\n      });\n    });\n  }\n\n  #buildBackgroundGrid() {\n    this.#field.forEach((row, rowIndex) => {\n      row.forEach((el, colIndex) => {\n        const div = document.createElement('div');\n        div.classList.add('bgTile');\n        div.style.width = `${this.#tileSize}px`;\n        div.style.height = `${this.#tileSize}px`;\n\n        const top = (this.#tileSize * rowIndex) + this.#TILE_OFFSET_PX * (rowIndex + 1);\n        const left = (this.#tileSize * colIndex) + this.#TILE_OFFSET_PX * (colIndex + 1);\n\n        div.style.left = `${left}px`;\n        div.style.top = `${top}px`;\n\n        this.#fieldEl.appendChild(div);\n      });\n    });\n  }\n\n  #animateMove(\n    div: HTMLDivElement,\n    property: AnimationProperty,\n    value: number,\n    callback: Function,\n  ) {\n    this.#isUiBlocked = true;\n\n    div\n      .animate({ [property]: `${value}px` }, moveAnimationOptions)\n      .finished\n      .then(() => {\n        this.#isUiBlocked = false;\n        callback();\n      });\n  }\n\n  #animateMerge(\n    div: HTMLDivElement,\n    property: AnimationProperty,\n    value: number,\n    mergedValue: number,\n    callback: Function,\n  ) {\n    this.#isUiBlocked = true;\n\n    div\n      .animate({ [property]: `${value}px` }, moveAnimationOptions)\n      .finished\n      .then(() => {\n        // eslint-disable-next-line no-param-reassign\n        div.innerText = mergedValue.toString();\n        div\n          .animate({ transform: 'scale(1.1)' }, mergeAnimationOptions)\n          .finished\n          .then(() => {\n            this.#isUiBlocked = false;\n            callback(null);\n          });\n      });\n  }\n\n  #moveLeft() {\n    const promises: Promise<unknown>[] = [];\n    let isDidAnyActions = false;\n\n    for (let rowIndex = 0; rowIndex < this.#field.length; rowIndex++) {\n      for (let colIndex = 0; colIndex <= this.#field.length - 1; colIndex++) {\n        for (let i = colIndex + 1; i <= this.#field.length - 1; i++) {\n          if (!this.#field[rowIndex][i]) continue;\n\n          const div = document.querySelector<HTMLDivElement>(`[data-row=\"${rowIndex}\"][data-col=\"${i}\"]`)!;\n          if (!div) return Promise.reject();\n\n          if (!this.#field[rowIndex][colIndex]) {\n            this.#isUiBlocked = true;\n            const p = new Promise((resolve) => {\n              const left = (this.#tileSize * colIndex) + this.#TILE_OFFSET_PX * (colIndex + 1);\n              div.dataset.col = colIndex.toString();\n\n              this.#animateMove(div, 'left', left, resolve);\n\n              this.#field[rowIndex][colIndex] = this.#field[rowIndex][i];\n              this.#field[rowIndex][i] = null;\n            });\n\n            isDidAnyActions = true;\n            promises.push(p);\n            continue;\n          }\n\n          if (this.#field[rowIndex][colIndex] === this.#field[rowIndex][i]) {\n            const p = new Promise((resolve) => {\n              const left = (this.#tileSize * colIndex) + this.#TILE_OFFSET_PX * (colIndex + 1);\n              div.dataset.col = colIndex.toString();\n\n              const mergedValue = this.#field[rowIndex][i]! * 2;\n              this.#animateMerge(div, 'left', left, mergedValue, resolve);\n\n              this.#field[rowIndex][colIndex] = mergedValue;\n              this.#field[rowIndex][i] = null;\n              this.#updateScore(mergedValue);\n            });\n\n            isDidAnyActions = true;\n            promises.push(p);\n            break;\n          } else break;\n        }\n      }\n    }\n\n    if (isDidAnyActions) {\n      this.#generateRandomTile();\n    }\n\n    return Promise.all(promises);\n  }\n\n  #moveRight() {\n    const promises: Promise<unknown>[] = [];\n    let isDidAnyActions = false;\n\n    for (let rowIndex = 0; rowIndex < this.#field.length; rowIndex++) {\n      for (let colIndex = this.#field.length - 1; colIndex >= 0; colIndex--) {\n        for (let i = colIndex - 1; i >= 0; i--) {\n          if (!this.#field[rowIndex][i]) continue;\n\n          const div = document.querySelector<HTMLDivElement>(`[data-row=\"${rowIndex}\"][data-col=\"${i}\"]`)!;\n          if (!div) return Promise.reject();\n\n          if (!this.#field[rowIndex][colIndex]) {\n            this.#isUiBlocked = true;\n            const p = new Promise((resolve) => {\n              const left = (this.#tileSize * colIndex) + this.#TILE_OFFSET_PX * (colIndex + 1);\n              div.dataset.col = colIndex.toString();\n\n              this.#animateMove(div, 'left', left, resolve);\n\n              this.#field[rowIndex][colIndex] = this.#field[rowIndex][i];\n              this.#field[rowIndex][i] = null;\n            });\n\n            isDidAnyActions = true;\n            promises.push(p);\n            continue;\n          }\n\n          if (this.#field[rowIndex][colIndex] === this.#field[rowIndex][i]) {\n            const p = new Promise((resolve) => {\n              const left = (this.#tileSize * colIndex) + this.#TILE_OFFSET_PX * (colIndex + 1);\n              div.dataset.col = colIndex.toString();\n\n              const mergedValue = this.#field[rowIndex][i]! * 2;\n              this.#animateMerge(div, 'left', left, mergedValue, resolve);\n\n              this.#field[rowIndex][colIndex] = mergedValue;\n              this.#field[rowIndex][i] = null;\n              this.#updateScore(mergedValue);\n            });\n\n            isDidAnyActions = true;\n            promises.push(p);\n            break;\n          } else break;\n        }\n      }\n    }\n\n    if (isDidAnyActions) {\n      this.#generateRandomTile();\n    }\n\n    return Promise.all(promises);\n  }\n\n  #moveDown() {\n    const promises: Promise<unknown>[] = [];\n    let isDidAnyActions = false;\n\n    for (let colIndex = 0; colIndex < this.#field.length; colIndex++) {\n      for (let rowIndex = this.#field.length - 1; rowIndex >= 0; rowIndex--) {\n        for (let i = rowIndex - 1; i >= 0; i--) {\n          if (!this.#field[i][colIndex]) continue;\n\n          const div = document.querySelector<HTMLDivElement>(`[data-row=\"${i}\"][data-col=\"${colIndex}\"]`)!;\n          if (!div) return Promise.reject();\n\n          if (!this.#field[rowIndex][colIndex]) {\n            this.#isUiBlocked = true;\n            const p = new Promise((resolve) => {\n              const top = (this.#tileSize * rowIndex) + this.#TILE_OFFSET_PX * (rowIndex + 1);\n              div.dataset.row = rowIndex.toString();\n\n              this.#animateMove(div, 'top', top, resolve);\n\n              this.#field[rowIndex][colIndex] = this.#field[i][colIndex];\n              this.#field[i][colIndex] = null;\n            });\n\n            isDidAnyActions = true;\n            promises.push(p);\n            continue;\n          }\n\n          if (this.#field[rowIndex][colIndex] === this.#field[i][colIndex]) {\n            const p = new Promise((resolve) => {\n              const top = (this.#tileSize * rowIndex) + this.#TILE_OFFSET_PX * (rowIndex + 1);\n              div.dataset.row = rowIndex.toString();\n\n              const mergedValue = this.#field[i][colIndex]! * 2;\n              this.#animateMerge(div, 'top', top, mergedValue, resolve);\n\n              this.#field[rowIndex][colIndex] = mergedValue;\n              this.#field[i][colIndex] = null;\n              this.#updateScore(mergedValue);\n            });\n\n            isDidAnyActions = true;\n            promises.push(p);\n            break;\n          } else break;\n        }\n      }\n    }\n\n    if (isDidAnyActions) {\n      this.#generateRandomTile();\n    }\n\n    return Promise.all(promises);\n  }\n\n  #moveUp() {\n    const promises: Promise<unknown>[] = [];\n    let isDidAnyActions = false;\n\n    for (let colIndex = 0; colIndex < this.#field.length; colIndex++) {\n      for (let rowIndex = 0; rowIndex <= this.#field.length - 1; rowIndex++) {\n        for (let i = rowIndex + 1; i <= this.#field.length - 1; i++) {\n          if (!this.#field[i][colIndex]) continue;\n\n          const div = document.querySelector<HTMLDivElement>(`[data-row=\"${i}\"][data-col=\"${colIndex}\"]`)!;\n          if (!div) return Promise.reject();\n\n          if (!this.#field[rowIndex][colIndex]) {\n            this.#isUiBlocked = true;\n            const p = new Promise((resolve) => {\n              const top = (this.#tileSize * rowIndex) + this.#TILE_OFFSET_PX * (rowIndex + 1);\n              div.dataset.row = rowIndex.toString();\n\n              this.#animateMove(div, 'top', top, resolve);\n\n              this.#field[rowIndex][colIndex] = this.#field[i][colIndex];\n              this.#field[i][colIndex] = null;\n            });\n\n            isDidAnyActions = true;\n            promises.push(p);\n            continue;\n          }\n\n          if (this.#field[rowIndex][colIndex] === this.#field[i][colIndex]) {\n            const p = new Promise((resolve) => {\n              const top = (this.#tileSize * rowIndex) + this.#TILE_OFFSET_PX * (rowIndex + 1);\n              div.dataset.row = rowIndex.toString();\n\n              const mergedValue = this.#field[i][colIndex]! * 2;\n              this.#animateMerge(div, 'top', top, mergedValue, resolve);\n\n              this.#field[rowIndex][colIndex] = mergedValue;\n              this.#field[i][colIndex] = null;\n              this.#updateScore(mergedValue);\n            });\n\n            isDidAnyActions = true;\n            promises.push(p);\n            break;\n          } else break;\n        }\n      }\n    }\n\n    if (isDidAnyActions) {\n      this.#generateRandomTile();\n    }\n\n    return Promise.all(promises);\n  }\n}\n","export default class Utils {\n  static getRandomTileValue(): number {\n    // value:probability\n    const possibleValues: { [key: number]: number } = {\n      2: 0.9,\n      4: 0.1,\n    };\n\n    const probabilitiesSum = Object.values(possibleValues).reduce((a, b) => a + b, 0);\n\n    let pick = Math.random() * probabilitiesSum;\n\n    // eslint-disable-next-line no-restricted-syntax, guard-for-in\n    for (const i in possibleValues) {\n      pick -= possibleValues[i];\n\n      if (pick <= 0) {\n        return Number(i);\n      }\n    }\n\n    return possibleValues[Object.values(possibleValues)[0]];\n  }\n}\n"],"names":["$6260f855154fb2c7$export$2e2bcd8739ae039","getRandomTileValue","possibleValues","pick","Math","random","Object","values","reduce","a","b","i","Number","$7ee79a805c8a64d2$var$moveAnimationOptions","duration","fill","$7ee79a805c8a64d2$var$mergeAnimationOptions","easing","$02b2fc1f0fd6e808$var$game","constructor","document","getElementById","getBoundingClientRect","width","length","ArrowDown","bind","ArrowUp","ArrowLeft","ArrowRight","init","addEventListener","event","func","code","preventDefault","then","forEach","call","querySelectorAll","e","parentNode","removeChild","querySelector","valueToAdd","scoreEl","innerText","toString","emptyCells","row","rowIndex","col","colIndex","push","x","y","max","randomEmptyCell","floor","el","div","createElement","classList","add","style","height","top","left","dataset","appendChild","property","value","callback","animate","finished","mergedValue","transform","promises","isDidAnyActions","Promise","reject","p","resolve","all"],"version":3,"file":"index.71def6a0.js.map"}